{"version":3,"sources":["axios.js","Row.js","Request.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","base_url","Row","title","fetchUrl","isLargerow","useState","movies","setmovies","trailerUrl","setTrailer","useEffect","a","get","request","data","results","fetchData","handleClick","movie","row","console","log","name","original_name","original_title","movieTrailer","then","url","urlParams","URL","searchParams","search","catch","error","className","videoId","opts","height","width","playerVars","autoplay","map","src","backdrop_path","alt","onClick","poster_path","APIKEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovie","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","theme","createMuiTheme","palette","primary","main","secondary","orange","Banner","str","n","Math","floor","random","length","ThemeProvider","style","color","lineHeight","vote_average","Button","variant","marginRight","overview","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64429b33.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nexport const Row = ({ title, fetchUrl, isLargerow }) => {\n  const [movies, setmovies] = useState([]);\n  const [trailerUrl, setTrailer] = useState(\"\");\n  //[] empty brackey only on page load\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setmovies(request.data.results);\n      // console.log(request);\n    }\n    fetchData();\n  }, [fetchUrl]); //make a requetst from api to display in row\n  //if bracket [] run once the row load and dont run it again\n  //if bracket [movies] if any change in movies useeffect will run\n  //console.log(movies);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n  const handleClick = (movie, row) => {\n    if (trailerUrl) {\n      setTrailer(\"\");\n    } else {\n      console.log(movie);\n      let name = \"\";\n      if (movie.original_name == null) {\n        name = movie?.title;\n      } else if (movie?.original_title == null) {\n        name = movie?.original_name;\n      }\n\n      movieTrailer(name || \"\")\n        .then((url) => {\n          console.log(url);\n          // URL is used to get the value after ? the URLSearchparams is used to get the particular key after ?\n          const urlParams = new URL(url).searchParams;\n          setTrailer(urlParams.get(\"v\"));\n          console.log(URL(url).search);\n        })\n        .catch((error) => console.log(error + \"errrrr\" + movie.name));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{movies && title}</h2>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      <div className=\"row_post\">\n        {isLargerow\n          ? movies.map((movie) => {\n              return (\n                <img\n                  className=\"img_contain\"\n                  src={base_url + movie.backdrop_path}\n                  alt={movie.name}\n                  onClick={() => {\n                    handleClick(movie);\n                  }}\n                />\n              );\n            })\n          : movies.map((movie) => {\n              return (\n                <img\n                  className=\"img_contain_large\"\n                  onClick={() => {\n                    handleClick(movie);\n                  }}\n                  src={base_url + movie.poster_path}\n                  alt={movie.name}\n                />\n              );\n            })}\n      </div>\n      {/* title  */}\n      {/* container posts*/}\n      {/*  */}\n    </div>\n  );\n};\n\nexport default Row;\n","const APIKEY = \"1be8a4759dcd7efa2a6fc31a47f6831d\";\n\nconst requests = {\n  fetchTrending: \"trending/all/day?api_key=\" + APIKEY,\n  fetchNetflixOriginals: \"discover/tv?api_key=\" + APIKEY,\n  fetchTopRated: \"movie/top_rated?api_key=\" + APIKEY,\n  fetchActionMovie: \"discover/movie?api_key=\" + APIKEY + \"&with_genres=28\",\n  fetchComedyMovies: \"discover/movie?api_key=\" + APIKEY + \"&with_genres=35\",\n  fetchHorrorMovies: \"discover/movie?api_key=\" + APIKEY + \"&with_genres=27\",\n  fetchRomanceMovies: \"discover/movie?api_key=\" + APIKEY + \"&with_genres=10749\",\n  fetchDocumentaries: \"discover/movie?api_key=\" + APIKEY + \"&with_genres=99\",\n};\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport request from \"./Request\";\nimport \"./Banner.css\";\nimport { Button } from \"@material-ui/core\";\nimport { orange } from \"@material-ui/core/colors\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#ffffff\",\n    },\n    secondary: {\n      main: orange[500],\n    },\n  },\n});\n\nexport const Banner = () => {\n  const [movie, setmovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requests = await axios.get(request.fetchActionMovie);\n      setmovies(\n        requests.data.results[\n          Math.floor(Math.random() * requests.data.results.length - 1)\n        ]\n      );\n    }\n    fetchData();\n  }, []);\n\n  //   always consolde log to testing before return\n\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        {/* as title button and description is in header image we wrap it in header */}\n        <div>\n          <div className=\"banner\">\n            <img\n              src={base_url + movie.backdrop_path}\n              alt=\"\"\n              className=\"img_banner\"\n            />\n\n            <div className=\"banner_contents\">\n              <img\n                className=\"navbar\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/340px-Netflix_2015_logo.svg.png\"\n                alt=\"\"\n              />\n              <h1 className=\"heading_text\">\n                {movie?.original_title || movie?.original_name}\n              </h1>\n\n              <h4 style={{ color: \"#7CFC00\", lineHeight: \"0.1em\" }}>\n                {movie.vote_average}/10{\" Rating\"}\n              </h4>\n\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                style={{ marginRight: \"5px\" }}\n              >\n                Play\n              </Button>\n              <Button variant=\"outlined\" color=\"primary\">\n                My List\n              </Button>\n\n              <p className=\"header_title\">{truncate(movie?.overview, 100)}</p>\n              {/* Title */}\n              {/* Button */}\n              {/* Descriotion */}\n            </div>\n            <div className=\"banner_fadebottom\"></div>\n          </div>\n          {/* Header image */}\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default Banner;\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport request from \"./Request\";\nimport Banner from \"./Banner\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <Row title=\"ACTION\" fetchUrl={request.fetchActionMovie} />\n\n      <Row\n        title=\"ROMANCE\"\n        fetchUrl={request.fetchRomanceMovies}\n        isLargerow={true}\n      />\n\n      <Row title=\"NETFLIX ORGINALS\" fetchUrl={request.fetchNetflixOriginals} />\n\n      <Row\n        title=\"TRENDING\"\n        fetchUrl={request.fetchTrending}\n        isLargerow={true}\n      />\n      <Row title=\"TOPRATED\" fetchUrl={request.fetchTopRated} />\n      <Row\n        title=\"COMEDY\"\n        fetchUrl={request.fetchComedyMovies}\n        isLargerow={true}\n      />\n\n      <Row title=\"HORROR\" fetchUrl={request.fetchHorrorMovies} />\n      <Row\n        title=\"DOCUMENTARIES\"\n        fetchUrl={request.fetchDocumentaries}\n        isLargerow={true}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}